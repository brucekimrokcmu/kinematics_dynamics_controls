%% KDC Assignment 4-1
% initial state
M = 80; g = 9.81; I = 2;
z0 = 0.8;   zv0 = -1;
x0 = 0;     xv0 = 0.1; 
theta0 = 0; thetav0 = 0.1;
p0 = [z0; x0; theta0];
v0 = [zv0; xv0; thetav0];

ldis = 0.2; rdis = 0.2;
L1 = 0.5; L2 = 0.5; 
phi_l = atan2(z0, ldis);
phi_r = atan2(z0, -rdis);

rl = sqrt(ldis^2+z0^2); rr = sqrt(rdis^2+z0^2);

alpha_l = acos((L1^2+L2^2 - rl^2)/(2*L1*L2));
alpha_r = acos((L1^2+L2^2 - rr^2)/(2*L1*L2));
beta_l = acos((rl^2 + L1^2 - L2^2)/(2*rl*L1));
beta_r = acos((rl^2 + L1^2 - L2^2)/(2*rr*L1));
theta_lk = pi - alpha_l; theta_rk = pi - alpha_r; 
theta_la = -(pi/2 - (phi_l - beta_l)) ; theta_ra = -(pi/2-(phi_r - beta_r));
theta_set(:,1) = [theta_la ; theta_lk; theta_ra; theta_rk];

% theta_set(:,1) = [-0.8462 ; 1.2025; -0.3563; 1.2025];


%% KDC Assignment 4-2, 4-3
% desired state 
z_des = z0; x_des = 0; theta_des = 0;
zv_des = 0; xv_des = 0; thetav_des = 0;

% current state 
z = z0;         zv = zv0;
x = x0;         xv = xv0;
theta = theta0; thetav = thetav0;
  
p(:, 1) = [z; x; theta];
v(:, 1) = [zv; xv; thetav];

% control parameters
k1 = 1000; k2 = 100; k3 =100; D1 = 300; D2 = 75; D3 = 75;

% Virtual forces generated by the spring-dampers
Fm_z(1) = M*g + k1*(z0 - z) - D1*zv;
Fm_x(1) = -k2*x - D2*xv;
Fm_theta(1) = -k3*theta - D3*thetav;

accm_z(1) = Fm_z(1) / M;
accm_x(1) = Fm_x(1) / M;
accm_theta(1) = Fm_theta(1) / I;


A(1) = -L1*cos(theta_set(1,1)) - L2*cos(theta_set(1,1)+theta_set(2,1));
B(1) = -L1*sin(theta_set(1,1)) - L2*sin(theta_set(1,1)+theta_set(2,1));
C(1) = -L1*cos(theta_set(3,1)) - L2*cos(theta_set(3,1)+theta_set(4,1));
D(1) = -L1*sin(theta_set(3,1)) - L2*sin(theta_set(3,1)+theta_set(4,1));

Q(1) = -L2*cos(theta_set(1,1)+theta_set(2,1));
R(1) = -L2*sin(theta_set(1,1)+theta_set(2,1));
S(1) = -L2*cos(theta_set(3,1)+theta_set(4,1));
T(1) = -L2*sin(theta_set(3,1)+theta_set(4,1));

E(1) = C(1)*B(1) - A(1)*D(1);
V(1) = -L1*L2*sin(theta_set(2,1));
W(1) = -L1*L2*sin(theta_set(4,1));

Jt = zeros(4,3);
Jt(:,:,1) = [C(1)*V(1)/E(1), D(1)*V(1)/E(1), (-V(1)-Q(1)*D(1)+R(1)*C(1))/(2*E(1)) - 0.5;  ...
      0, 0, 0.5; ...
      -A(1)*W(1)/E(1), -B(1)*W(1)/E(1), (W(1)+S(1)*B(1)-T(1)*A(1))/(2*E(1)) - 0.5;...
      0, 0, 0.5];

torque(:, 1) = Jt(:,:,1) * [Fm_z(1);Fm_x(1);Fm_theta(1)];

dt = 0.01;
for i = 1:1000
    
    accm_z(i) = Fm_z(i) / M;
    accm_x(i) = Fm_x(i) / M;
    accm_theta(i) = Fm_theta(i) / I;

    v(1, i+1) = v(1, i) + accm_z(i)*dt;
    v(2, i+1) = v(2, i) + accm_x(i)*dt;
    v(3, i+1) = v(3, i) + accm_theta(i)*dt;

    p(1, i+1) = p(1, i) + v(1, i)*dt + 0.5*accm_z(i)*dt^2;
    p(2, i+1) = p(2, i) + v(2, i)*dt + 0.5*accm_x(i)*dt^2;
    p(3, i+1) = p(3, i) + v(3, i)*dt + 0.5*accm_theta(i)*dt^2;

    Fm_z(i+1) = M*g + k1*(z0 - p(1,i)) - D1*v(1,i) - M*g;
    Fm_x(i+1) = -k2*p(2,i) - D2*v(2,i);
    Fm_theta(i+1) = -k3*p(3,i) - D3*v(3,i);

    torque(:, i+1) = Jt(:,:,1) * [Fm_z(i+1); Fm_x(i+1); Fm_theta(i+1)];

end

t = 1:size(p,2);
figure;
subplot(3,1,1);plot(t,p(1,:)); title ('z to time');
subplot(3,1,2);plot(t,p(2,:)); title ('x to time');
subplot(3,1,3);plot(t,p(3,:)); title ('theta to time');
sgtitle('State by generated virtual force') 

t1 = 1:size(torque,2);
figure;
subplot(3,1,1);plot(t1, torque(1,:)); title ('motor 1 to time');
subplot(3,1,2);plot(t1, torque(2,:)); title ('motor 2 to time');
subplot(3,1,3);plot(t1, torque(3,:)); title ('motor 3 to time');
sgtitle('Motor saturation due to the virtual force and destabilization risk') 


